package com.cg.health.service;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cg.health.dao.PolicyDao;
import com.cg.health.dao.PolicyPurchaseDao;
import com.cg.health.dao.PolicyUserDao;
import com.cg.health.entities.Policy;
import com.cg.health.entities.PolicyPurchase;
import com.cg.health.exception.PolicyAlreadyExistsException;
import com.cg.health.exception.PolicyNotFoundException;
import com.cg.health.exception.PolicyPurchaseAlreadyExistsException;
import com.cg.health.exception.PolicyPurchaseNotFoundException;

@Service
public class PolicyPurchaseServiceImpl implements PolicyPurchaseService {

	@Autowired
	private PolicyPurchaseDao policyPurchaseDao;
	@Autowired
	private PolicyDao policyDao;
	@Autowired
	private PolicyUserDao userDao;
	
	

	@Override
	public PolicyPurchase addPolicyPurchase(int policyId,int userId,int policyPurchaseDuration)throws PolicyPurchaseAlreadyExistsException {
		Policy policy;
        if (policyDao.findById(policyId).isEmpty()) {
            throw new PolicyNotFoundException();
            }
		LocalDate startDate = policyPurchase1.getPurchaseDate();
		policyPurchase1.setPurchaseEndDate(startDate.plusYears(policyPurchase1.getPolicyPuchaseDuration()));
		int age = LocalDate.now().getYear() - policyPurchase1.getPolicyUser().getDob().getYear();
		float payingTerm = policyPurchase1.getPolicyPuchaseDuration();
		double sumAssured = policyPurchase1.getPolicy().getPolicyCost();
		float policyTerm = policyPurchase1.getPolicy().getPolicyDurationInYear();
        PolicyPurchase savedPolicyPurchase = policyPurchaseDao.save(policyPurchase);
        return savedPolicyPurchase;
		//return policyPurchaseDao.save(policyPurchase);
	}

	@Override
	public Optional<PolicyPurchase> getPolicyPurchaseUserById(long policyPurchaseUserId) throws PolicyPurchaseNotFoundException {
		// TODO Auto-generated method stub
		  PolicyPurchase policyPurchase;
	        if (policyPurchaseDao.findById(policyPurchaseUserId).isEmpty()) {
	            throw new PolicyPurchaseNotFoundException();
	        } else {
	            policyPurchase = policyPurchaseDao.findById(policyPurchaseUserId).get();
	        }
	        return Optional.of(policyPurchase);
	    }
		//return policyPurchaseDao.getById(policyPurchaseUserId);
	

	@Override
	public double calculatePrimium(int age, float payingTerm, double sumAssured, float policyTerm) {
		double primium=1;
		if (age <=18) {
			primium = (sumAssured/(payingTerm*12))*1.1;
		}
		
		else if (age <=30) {
			primium = (sumAssured/(payingTerm*12))*1.2;
		}
		else if (age <=50) {
			primium = (sumAssured/(payingTerm*12))*1.4;
		}
		else if (age <=100) {
			primium = (sumAssured/(payingTerm*12))*1.6;
		}
		
		return primium;
	}

		@Override
		public List<PolicyPurchase> getPolicyPurchase() throws PolicyPurchaseNotFoundException {
			
			return policyPurchaseDao.findAll();
		}

}
